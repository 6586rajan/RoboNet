{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","image","className","alt","src","CardList","robots","cardComponent","map","user","i","StrictMode","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oRAeeA,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,GAAe,EAAXC,MAC5B,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA4BJ,KACjD,gCACI,6BAAKF,IACL,4BAAIC,WCWLM,EAjBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAQ,cAAC,EAAD,CACJV,GAAIM,EAAOI,GAAGV,GACdF,KAAMQ,EAAOI,GAAGZ,KAChBC,MAAOO,EAAOI,GAAGX,MACjBE,MAAOK,EAAOI,GAAGT,OAJFS,MAOvB,OACI,cAAC,IAAMC,WAAP,UACI,8BACKJ,OCDFK,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKZ,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBa,KAAK,SACLC,YAAY,gBAEZC,SAAUH,OCGPI,G,MAVA,SAACC,GACZ,OACG,qBAAKjB,UAAU,SAAf,SACK,qBAAKkB,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAQ,SAAnE,SACKJ,EAAMK,eCwDRC,G,wDApDd,aAAe,IAAD,8BACb,gBAeDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAhB1C,EAAKC,MAAQ,CACZzB,OAAQ,GACRO,YAAa,IAJD,E,qDASd,WAAqB,IAAD,OAEnBmB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACtB,OAAQ8B,S,oBAUxC,WACC,MAA8BC,KAAKN,MAA5BzB,EAAP,EAAOA,OAAQO,EAAf,EAAeA,YAETyB,EAAehC,EAAOiC,QAAO,SAAAC,GAClC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS7B,EAAY4B,kBAGtD,OAAKnC,EAAOqC,OAOV,cAAC,IAAMhC,WAAP,UACC,sBAAKT,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,2BAEA,cAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUpB,OAAQgC,WAXrB,oBAAIpC,UAAU,QAAd,yB,GAlCc0C,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.96f9abf0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({name, email, id, image}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"robots\" src = {`https://robohash.org/${id}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots }) => {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return (<Card key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} \r\n            image={robots[i].image}/>)\r\n    })\r\n\r\n    return (\r\n        <React.StrictMode>\r\n            <div>\r\n                {cardComponent}\r\n            </div>\r\n        </React.StrictMode>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n// \r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"Search Droids\"\r\n            // every time the searchbox changes, the SearchChange event is fired\r\n            onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n       <div className=\"parent\">\r\n            <div style={{overflow: 'scroll', border:'1px solid black', height: '500px'}}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n// import { robots } from './robots.jsx';\nimport './App.css';\n\n\n\nclass App extends Component {\n\t// creating a state to keep looking for any updates on the searchfield\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\t// this component checks for any update in the window\n\tcomponentDidMount() {\n\t\t// gets the json from a API post request... we then map these users to robots in the state. \n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({robots: users}));\n\t}\n\t\n\tonSearchChange = (event) => {\n\t\t// every time this event is fired, searchfield is updated\n\t\tthis.setState({ searchfield: event.target.value });\n\t\t// console.log(filterRobots);\n\t}\n\n\n\trender(){\n\t\tconst {robots, searchfield} = this.state;\n\t\t// takes in values from the search field/ searchbox and filters the list of robots that includes the searchfield in their names.\n\t\tconst filterRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\t// if there are no entries in robots then return the loading sign\n\t\tif (!robots.length) {\n\t\t\treturn (\n\t\t\t\t<h1 className=\"tc f1\">Loading</h1>\n\t\t\t)\n\t\t}\n\t\telse{\n\t\t\treturn (\n\t\t\t\t<React.StrictMode>\n\t\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t\t<h1 className=\"f1\">Droid Network</h1>\n\t\t\t\t\t\t{/* the onSearchChange method is passed as 'searchChange' so the searchbox can call that method */}\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<CardList robots={filterRobots}/>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\n\t\t\t\t</React.StrictMode>\n\t\t\t);\n\t\t}\n \t}\t \n}\n\nexport default App;\n// This was starter content\n\n// class App extends Component {\n//   render(){\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   } \n// }\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Hello from './Hello.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}